# A workflow to BUILD the app image, RUN the scanner, and PUSH if scan passes
name: SA, Build, Scan, and Push

on:
  workflow_dispatch:
    inputs:
      IMAGE_NAME_TO_SCAN:
        description: 'The tag for your application image to be built (e.g., my-app:latest)'
        required: true
        default: 'checkout-image'
      GCP_PROJECT_ID:
        description: 'GCP Project ID for authentication'
        required: true
        default: 'cispoc'
      AR_REPOSITORY: 
        description: 'Artifact Registry repository name (e.g., my-app-repo)'
        required: true
        default: 'demo-images'
      ORGANIZATION_ID:
        description: 'Your GCP Organization ID'
        required: true
        default: '714470867684'
      CONNECTOR_ID:
        description: 'The ID for your pipeline connector'
        required: true
        default: 'organizations/714470867684/locations/global/connectors/privatepreviewdemo'
      SCANNER_IMAGE:
        description: 'The full registry path for your PRE-BUILT scanner tool'
        required: true
        default: 'us-central1-docker.pkg.dev/ci-plugin/ci-images/scc-artifactguard-scan-image:latest'
      IMAGE_TAG:
        description: 'The Docker image version (of the app image)'
        required: true
        default: 'latest'
      IGNORE_SERVER_ERRORS:
        description: 'Ignore server errors'
        required: false
        type: boolean
        default: false
      VERBOSITY:
        description: 'Verbosity flag'
        required: false
        default: 'HIGH'

jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    steps:
      # 1. Check out repository (for your app's Dockerfile)
      - name: Check out repository
        uses: actions/checkout@v4

      # 2. Authenticate to Google Cloud
      - name: Authenticate to GCP
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      # 3. Set up the gcloud CLI
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          project_id: ${{ inputs.GCP_PROJECT_ID }}

      # 4. Configure Docker (needed to pull SCANNER_IMAGE and push app image)
      - name: Configure Docker
        run: gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

      # 6. Build Application Image Locally (IMAGE_NAME_TO_SCAN)
      - name: Build Application Image Locally
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false  # <-- Do not push
          load: true   # <-- Load image into the runner's local daemon
          # Tag the image with the name the scanner will look for
          tags: |
            ${{ inputs.IMAGE_NAME_TO_SCAN }}:${{ inputs.IMAGE_TAG }}

      # 7. Run Image Scan (Using the SCANNER_IMAGE)
      - name: 'Run Image Analysis Scan'
        if: steps.auth.outcome == 'success'
        run: |
          echo "📦 Pulling scanner image and running scan..."

          # This logic remains the same as your very first file
          SCANNER_IMAGE="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.SCANNER_IMAGE || env.SCANNER_IMAGE }}"
          GCP_PROJECT_ID="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.GCP_PROJECT_ID || env.GCP_PROJECT_ID }}"
          ORGANIZATION_ID="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.ORGANIZATION_ID || env.ORGANIZATION_ID }}"
          IMAGE_NAME="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.IMAGE_NAME_TO_SCAN || env.IMAGE_NAME_TO_SCAN }}"
          IMAGE_TAG="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.IMAGE_TAG || env.IMAGE_TAG }}"
          CONNECTOR_ID="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.CONNECTOR_ID || env.CONNECTOR_ID }}"
          VERBOSITY="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.VERBOSITY || env.VERBOSITY }}"
          IGNORE_ERRORS="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.IGNORE_SERVER_ERRORS || (env.IGNORE_SERVER_ERRORS == 'true') }}"

          exit_code=0
          
          # This 'docker run' pulls the SCANNER_IMAGE from the registry
          # and passes the name of the locally-built app image (IMAGE_NAME)
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v ${{ steps.auth.outputs.credentials_file_path }}:/tmp/scc-key.json \
            -e GCLOUD_KEY_PATH=/tmp/scc-key.json \
            -e GCP_PROJECT_ID="${GCP_PROJECT_ID}" \
            -e ORGANIZATION_ID="${ORGANIZATION_ID}" \
            -e IMAGE_NAME="${IMAGE_NAME}" \
            -e IMAGE_TAG="${IMAGE_TAG}" \
            -e CONNECTOR_ID="${CONNECTOR_ID}" \
            -e BUILD_TAG="${{ github.workflow }}" \
            -e BUILD_ID="${{ github.run_number }}" \
            -e VERBOSITY="${VERBOSITY}" \
            "${SCANNER_IMAGE}" \
            || exit_code=$?

          echo "Docker run finished with exit code: $exit_code"

          # --- Replicate Jenkins Exit Code Logic ---
          if [ $exit_code -eq 0 ]; then
            echo "✅ Evaluation succeeded: Conformant image."
          elif [ $exit_code -eq 1 ]; then
            echo "❌ Scan failed: Non-conformant image (vulnerabilities found)."
            exit 1 # Fail the step
          else
            if [ "$IGNORE_ERRORS" = "true" ]; then
              echo "⚠️ Server/internal error occurred (Code: $exit_code), but IGNORE_SERVER_ERRORS=true. Proceeding."
            else
              echo "❌ Server/internal error occurred (Code: $exit_code) during evaluation. Set IGNORE_SERVER_ERRORS=true to override."
              exit 1 # Fail the step
            fi
          fi

      # 8. Push Application Image (ONLY if scan succeeded) <--- NEW STEP
      # This step only runs if the 'Run Image Analysis Scan' step above exited with 0
      - name: Push Application Image to Artifact Registry
        run: |
          # Define the local and remote tags
          LOCAL_IMAGE_NAME="${{ inputs.IMAGE_NAME_TO_SCAN }}:${{ inputs.IMAGE_TAG }}"
          
          # This path is based on your 'Configure Docker' step (us-central1)
          # and the new AR_REPOSITORY input.
          FULL_AR_TAG="us-central1-docker.pkg.dev/${{ inputs.GCP_PROJECT_ID }}/${{ inputs.AR_REPOSITORY }}/${{ inputs.IMAGE_NAME_TO_SCAN }}:${{ inputs.IMAGE_TAG }}"

          echo "Tagging local image ${LOCAL_IMAGE_NAME} as ${FULL_AR_TAG}"
          docker tag "${LOCAL_IMAGE_NAME}" "${FULL_AR_TAG}"
          
          echo "Pushing ${FULL_AR_TAG} to Artifact Registry..."
          docker push "${FULL_AR_TAG}"
